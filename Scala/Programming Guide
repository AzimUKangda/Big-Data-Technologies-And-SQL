How to Return Option Value From Function.
--> Option(value).filter(_.nonEmpty)

How to Check Value Returned As Option or check value of Option Type
--> There are three ways
1) Using Pattern Matching
2) Using getOrElse
3) Using map

How to Define Function with implicit parameter
---> def function(val1: Int)(implicit val2:Double) 

How to Call Function with implicit parameter
---> declare implicit variable in the scope wherever function will be called. or pass value with addition bracket like declaration of 
function.

Referential Transparency?
---> A function is said to be referentially transparent if we can replace it with a corresponding value without changing the program's
behaviour.

side effect --> Function should not modify any outside variable/input param.

why Pure Function?

1) Encourage safe ways of programming.
2) simple and easy to re-use.
3) composable or modular. (andThenThis) -- function composition.
4) Easy to test.
5) Memoizable (you can cache the function)
6) Pure Function can be lazy.

What is First class Function?
--> If you can treat a function as a value, it is a first class function. you can pass function as arg also you can return function from 
other function.

by default all function in scala are first class function.

**** Example of Function Returning another function :

 def getFunction(c: Int) = (i: Int) => {
    val doubler = (x: Int) => { x * 2 }
    val tripler = (x: Int) => { x * 3 }
    if (c > 1) doubler(i)
    else tripler(i)
  }
  
using anonymous function same above thing we can achieve as:

def getFunction(c: Int) = (i:Int) => {
  if(c>0) {i*2}
  else {i*3}
}

Immutability helps to adopt a methametical approach.
Immutable variable is more thread safe.

how to write a factorial or fibonacci function correctly using TailCalls

object Factorial {

  /**
    * Returns the nth factorial
    */
  def apply(n: Long): BigInt = {
    if (n < 0)
      throw new IllegalArgumentException("Can't factorial to an index less than 0")
    else {
      import scala.util.control.TailCalls._
      def step(current: Long): TailRec[BigInt] = {
        if (current <= 0)
          done(1)
        else
          tailcall {
            for {
              next <- step(current - 1)
            } yield current * next
          }
      }
      step(n).result
    }
  }

}









