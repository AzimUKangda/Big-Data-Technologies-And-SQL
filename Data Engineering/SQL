Question: How to get years of expereince if hiredate is given in data?
Answer : round(PERIOD_DIFF(EXTRACT(YEAR_MONTH FROM NOW()), EXTRACT(YEAR_MONTH FROM hiredate))/12) AS year_of_exp.

Question: List the employees who joined in the company on the same day.
Answer: select * from employee e where hiredate in (select hiredate from employee where e.empno <> empno);

Question: Emps hired on or before 15th of any month are pais on he last friday of that month those hired after 15th are paid on the first firday of the following 
month. print a list of emps their hire date and the first pay date. sort on hire date.

Answer: select ename, hiredate, next_day(last_day(hiredate),'FRIDAY') - 7 from employee where day(hiredate) <=15
                                      union
        select ename,hiredate,next_day(last_day(hiredate),'FRIDAY') from emp where day(hiredate) > 15;

Senario 1: Find a new and repeat customer:

Answer:

CREATE TABLE customer_orders (
 order_id INTEGER PRIMARY KEY,
 customer_id INTEGER,
 order_date DATE,
 order_amount INTEGER
);

INSERT INTO customer_orders VALUES (1, 100, '2022-01-01', 2000);
INSERT INTO customer_orders VALUES (2, 200, '2022-01-01', 2500);
INSERT INTO customer_orders VALUES (3, 300, '2022-01-01', 2100);
INSERT INTO customer_orders VALUES (4, 100, '2022-01-02', 2000);
INSERT INTO customer_orders VALUES (5, 400, '2022-01-02', 2200);
INSERT INTO customer_orders VALUES (6, 500, '2022-01-02', 2700);
INSERT INTO customer_orders VALUES (7, 100, '2022-01-03', 3000);
INSERT INTO customer_orders VALUES (8, 400, '2022-01-03', 1000);
INSERT INTO customer_orders VALUES (9, 600, '2022-01-03', 3000);
select * from customer_orders;

select * from customer_orders where customer_id = 200;

select abc.order_date, sum(abc.first_visit_flag) as new_customer_count, sum(abc.repeat_visit_flag) as repeat_customer_flag from (with first_visit as(
select customer_id, min(order_date) as first_visit_date from customer_orders group by customer_id
)

select c.customer_id, c.order_date, fv.first_visit_date, case when c.order_date = fv.first_visit_date then 1 else 0 end as first_visit_flag,  case when c.order_date != fv.first_visit_date then 1 else 0 end as repeat_visit_flag from customer_orders c inner join first_visit fv on c.customer_id = fv.customer_id) abc group by abc.order_date;

Scenario 2:

CREATE TABLE employee_access (
 name TEXT,
 address TEXT,
 email TEXT,
 floor INTEGER,
 resources TEXT
);

insert into employee_access values ('A','Bangalore','A@gmail.com',1,'CPU');
insert into employee_access values ('A','Bangalore','A1@gmail.com',1,'CPU');
insert into employee_access values ('A','Bangalore','A2@gmail.com',2,'DESKTOP');
insert into employee_access values ('B','Bangalore','B@gmail.com',2,'DESKTOP');
insert into employee_access values ('B','Bangalore','B1@gmail.com',2,'DESKTOP');
insert into employee_access values ('B','Bangalore','B2@gmail.com',1,'MONITOR');

select * from employee_access;

with 
total_visit as 
(
select name, count(1) as total_visit, group_concat(resources) as resources_used from employee_access group by name
)
,floor_visit as
(
select name, floor, count(1) as no_of_floor_visit, 
rank() over(partition by name order by count(1) desc) as rn
from employee_access group by name, floor
) 

select fv.name, fv.floor, tv.total_visit, tv.resources_used as most_visited_floor from floor_visit fv 
inner join total_visit tv on fv.name=tv.name
where rn=1;






